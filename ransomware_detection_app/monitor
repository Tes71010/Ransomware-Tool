import threading
import os
import time

def monitor_directory(directory_path):
    """Monitors the specified directory for file changes."""
    print(f"Monitoring directory: {directory_path}")

    # Create a dictionary to store the last known modification times of each file
    files_last_modified = {}

    while True:
        current_files = {entry.name: entry.stat().st_mtime for entry in os.scandir(directory_path) if entry.is_file()}

        # Check for added or modified files
        for filename, mtime in current_files.items():
            if filename not in files_last_modified:
                print(f"New file detected: {filename}")
            elif files_last_modified[filename] != mtime:
                print(f"Modified file detected: {filename}")
            # Update the last modified time in the tracking dictionary
            files_last_modified[filename] = mtime

        # Check for deleted files
        deleted_files = set(files_last_modified) - set(current_files)
        for filename in deleted_files:
            print(f"Deleted file detected: {filename}")
            del files_last_modified[filename]

        # Sleep for a while before checking again to avoid high CPU usage
        time.sleep(2)

# Set up the monitoring directory path and start the thread
monitoring_path = os.path.join(os.getcwd(), 'monitor')

# Ensure the directory exists
if not os.path.exists(monitoring_path):
    os.makedirs(monitoring_path)

# Start the monitoring thread
thread = threading.Thread(target=monitor_directory, args=(monitoring_path,))
thread.start()
